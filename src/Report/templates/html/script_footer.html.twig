<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
<script src="https://code.jquery.com/jquery-1.12.4.min.js" integrity="sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=" crossorigin="anonymous"></script>
<!-- Latest compiled and minified JavaScript -->
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.2/dist/Chart.min.js"></script>
<script type="text/javascript">
  (function ($, c) {
    function formatDate(date) {
    var hours = date.getHours();
    var minutes = date.getMinutes();
    var ampm = hours >= 12 ? 'pm' : 'am';
    hours = hours % 12;
    hours = hours ? hours : 12; // the hour '0' should be '12'
    minutes = minutes < 10 ? '0'+minutes : minutes;
    var strTime = hours + ':' + minutes + ' ' + ampm;

    var yyyy = date.getFullYear(),
        mm   = ((date.getMonth()+1)+"").padStart(2, '0'),
        dd   = (date.getDate()+"").padStart(2, '0');

    return yyyy + "-" + mm + "-" + dd + " " + strTime;
  }

    function getPieishConfig(data, series, table) {
      var config = {
        data: {},
        type: data.chartType,
        options: {}
      };

      // Labels == X-Axis labels.
      config.data.labels = $.map($(data.chartLabels, table), function (e) {
        return $(e).text();
      });

      config.data.datasets = $.map(series, function (s, i) {
        var set = $.map($(s, table), function (e) {
          return $(e).text().replace(',', '');
        });
        return {
          data: set,
          backgroundColor: data.chartColors
        }
      });

      if (data.chartTitle) {
        config.options.title = {
          display: true,
          text: data.chartTitle
        };
      }

      if (data.chartLegend) {
        config.options.legend = {};
        if (data.chartLegend == "none") {
          config.options.legend.display = false;
        }
        else {
          config.options.legend.position = data.chartLegend;
        }
      }
      
      // maintainAspectRatio is TRUE by default, make it FALSE if need be.
      if (data.chartMaintainAspectRatio == false) {
        config.options.maintainAspectRatio = false;
      }

      return config;
    }

    function getBarLineConfig(data, series, table) {
      var config = {
        data: {},
        type: data.chartType,
        options: {
          scales: {
            xAxes: [],
            yAxes: []
          }
        }
      };

      // Labels == X-Axis labels.
      config.data.labels = $.map($(data.chartLabels, table), function (e) {
        var label = $(e).text();
        if (d = Date.parse(label)) {
          label = formatDate(new Date(d));
        }
        return label;
      });

      var series_labels = [];
      if (data.chartSeriesLabels) {
        series_labels = data.chartSeriesLabels.split(',');
      }

      config.data.datasets = $.map(series, function (s, i) {

        // Derive a set of numbers.
        var set = $.map($(s, table), function (e) {
          return $(e).text().replace(',', '');
        });

        // For bar/line graphs, if there is only one series, we should use
        // one color unless there are enough colors available for each
        // value in the set.
        var bgColor = set.length <= data.chartColors.length || series.length > 1 ? data.chartColors[i] : data.chartColors[0];

        var label = {
          data: set,
          label: $(series_labels[i], table).text()
        }

        if (config.type == 'line') {
          label.borderColor = bgColor;
          label.backgroundColor = 'rgb(0,0,0,0)';
          label.pointRadius = 0;
        }
        else {
          label.backgroundColor = bgColor;
        }

        return label;
      });

      // Axis labels and gridlines for bar/line type graphs.
      var xAxis = {};
      var yAxis = {};

      if (data.chartStacked) {
        xAxis.stacked = true;
        yAxis.stacked = true;
      }
      if (data.chartXAxis) {
        xAxis.scaleLabel = {
          labelString: data.chartXAxis,
          display: true
        }
      }
      if (data.chartYAxis) {
        yAxis.scaleLabel = {
          labelString: data.chartYAxis,
          display: true
        }
      }

      config.options.scales.xAxes.push(xAxis);
      config.options.scales.yAxes.push(yAxis);

      if (data.chartTitle) {
        config.options.title = {
          display: true,
          text: data.chartTitle
        };
      }

      if (data.chartLegend) {
        config.options.legend = {};
        if (data.chartLegend == "none") {
          config.options.legend.display = false;
        }
        else {
          config.options.legend.position = data.chartLegend;
        }
      }
      
      // maintainAspectRatio is TRUE by default, make it FALSE if need be.
      if (data.chartMaintainAspectRatio == false) {
        config.options.maintainAspectRatio = false;
      }
      
      return config;
    }


    // Series colors.
    var colors = [
      'rgba(26, 188, 156,1.0)',
      'rgba(46, 204, 113,1.0)',
      'rgba(52, 152, 219,1.0)',
      'rgba(155, 89, 182,1.0)',
      'rgba(52, 73, 94,1.0)',
      'rgba(241, 196, 15,1.0)',
      'rgba(230, 126, 34,1.0)',
      'rgba(231, 76, 60,1.0)',
      'rgba(236, 240, 241,1.0)',
      'rgba(149, 165, 166,1.0)',
      'rgba(22, 160, 133,1.0)',
      'rgba(39, 174, 96,1.0)',
      'rgba(41, 128, 185,1.0)',
      'rgba(142, 68, 173,1.0)',
      'rgba(44, 62, 80,1.0)',
      'rgba(243, 156, 18,1.0)',
      'rgba(211, 84, 0,1.0)',
      'rgba(192, 57, 43,1.0)',
      'rgba(189, 195, 199,1.0)',
      'rgba(127, 140, 141,1.0)'
    ];
    Chart.defaults.global.legend.position = 'right';
    Chart.defaults.global.title.display = true;

    $('.chart-unprocessed').each(function () {

      var data = $.extend({
        chartSeries: '',
        chartLabels: '',
        chartSeriesLabels: false,
        chartType: 'bar',
        chartStacked: false,
        chartTitle: '',
        chartWidth: '100%',
        chartHeight: '100%',
        chartColors: '',
        chartTableIndex: 0,
        chartMaintainAspectRatio: true
      }, $(this).data());

      var pieish = ['pie', 'doughnut'].indexOf(data.chartType) > 0;

      // Build color palette.
      // Change the delimiter from a comma to a semi colonâ€¨
      data.chartColors = data.chartColors.replace(/\),/g, ');');

      // Merge the various color palette lists together
      data.chartColors = $.merge(data.chartColors.split(';'), $.merge(c, colors))
          .filter(function (i) {
            return i.length;
          });

      if (data.chartBootstrapColumns != undefined) {
        $(this).addClass('col-sm-' + data.chartBootstrapColumns);
      }
      else {
        $('canvas', this).css({
          width: data.chartWidth,
          height: data.chartHeight
        })
      }

      $(this).html('<canvas></canvas>');
      $('canvas', this).css('height', data.chartHeight);

      var ctx = $('canvas', this).get(0).getContext('2d');
      var series = data.chartSeries.split(',');
      var table = $(this).siblings('table').get(data.chartTableIndex);

      if (pieish) {
        new Chart(ctx, getPieishConfig(data, series, table));
      }
      else {
        new Chart(ctx, getBarLineConfig(data, series, table));
      }
      $(this).removeClass('chart-unprocessed').addClass('chart');

      if ((data.chartHideTable !== undefined) && data.chartHideTable) {
        $(table).hide();
      }
    });

  })(jQuery, window.chartColors || []);
</script>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-120749223-1', 'auto');
ga('set', 'checkProtocolTask', null);
ga('set', 'validationTask	', null);
ga('set', 'checkStorageTask', null);
ga('send', 'pageview', '/profile/{{ profile }}/{{ domain }}', {
  title: '{{ title | raw }} - {{ domain }}'
});
</script>
<!-- End Google Analytics -->
